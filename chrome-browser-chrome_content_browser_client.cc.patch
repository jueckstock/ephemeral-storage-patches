diff --git a/chrome/browser/chrome_content_browser_client.cc b/chrome/browser/chrome_content_browser_client.cc
index b5deda2a1739..d525575dd07c 100644
--- a/chrome/browser/chrome_content_browser_client.cc
+++ b/chrome/browser/chrome_content_browser_client.cc
@@ -1327,6 +1327,11 @@ std::string ChromeContentBrowserClient::GetStoragePartitionIdForSite(
            extensions::util::SiteHasIsolatedStorage(site, browser_context))
     partition_id = site.spec();
 #endif
+  // ESP: separate isolated sites from the default bucket for session state stuff
+  else if (base::CommandLine::ForCurrentProcess()->HasSwitch("ephemeral-frame-storage")
+      && (site.host().compare(0, 6, "esp---") == 0)) {
+    partition_id = site.spec();
+  }
 
   DCHECK(IsValidStoragePartitionId(browser_context, partition_id));
   return partition_id;
@@ -1349,11 +1354,21 @@ void ChromeContentBrowserClient::GetStoragePartitionConfigForSite(
     std::string* partition_domain,
     std::string* partition_name,
     bool* in_memory) {
-  // Default to the browser-wide storage partition and override based on |site|
-  // below.
-  partition_domain->clear();
-  partition_name->clear();
-  *in_memory = false;
+
+  // ESP: i.f.f. the incoming site-URL has a "esp---{{GUID}}---" prefixed eTLD+1 hostname, create a custom partition
+  auto* cli = base::CommandLine::ForCurrentProcess();
+  if (cli->HasSwitch("ephemeral-frame-storage")
+      && (site.host().compare(0, 6, "esp---") == 0)) {
+    *partition_domain = "esp";
+    *partition_name = site.spec();
+    *in_memory = !cli->HasSwitch("efs-persist"); // allow turning on persistence
+  } else {
+    // Default to the browser-wide storage partition and override based on |site|
+    // below.
+    partition_domain->clear();
+    partition_name->clear();
+    *in_memory = false;
+  }
 
 #if BUILDFLAG(ENABLE_EXTENSIONS)
   bool success = extensions::WebViewGuest::GetGuestPartitionConfigForSite(
@@ -4662,6 +4677,12 @@ bool ChromeContentBrowserClient::WillCreateRestrictedCookieManager(
     return true;
   }
 #endif
+  // b3c: block 3rd party cookies by suppressing RestrictedCookieManagers
+  if (base::CommandLine::ForCurrentProcess()->HasSwitch("block-cross-cookies")) {
+    if (origin != top_frame_origin) {
+      return true;
+    }
+  }
   return false;
 }
 

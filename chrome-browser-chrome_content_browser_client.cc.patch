diff --git a/chrome/browser/chrome_content_browser_client.cc b/chrome/browser/chrome_content_browser_client.cc
index b4087b7737c2..1a96c9da95ea 100644
--- a/chrome/browser/chrome_content_browser_client.cc
+++ b/chrome/browser/chrome_content_browser_client.cc
@@ -1408,6 +1408,10 @@ std::string ChromeContentBrowserClient::GetStoragePartitionIdForSite(
            extensions::util::SiteHasIsolatedStorage(site, browser_context))
     partition_id = site.spec();
 #endif
+  // ESP: separate isolated sites from the default bucket for session state stuff
+  else if (site.host().compare(0, 6, "esp---") == 0) {
+    partition_id = site.spec();
+  }
 
   DCHECK(IsValidStoragePartitionId(browser_context, partition_id));
   return partition_id;
@@ -1430,11 +1434,19 @@ void ChromeContentBrowserClient::GetStoragePartitionConfigForSite(
     std::string* partition_domain,
     std::string* partition_name,
     bool* in_memory) {
-  // Default to the browser-wide storage partition and override based on |site|
-  // below.
-  partition_domain->clear();
-  partition_name->clear();
-  *in_memory = false;
+
+  // ESP: i.f.f. the incoming site-URL has a "esp---{{GUID}}---" prefixed eTLD+1 hostname, create a custom partition
+  if (site.host().compare(0, 6, "esp---") == 0) {
+    *partition_domain = "esp";
+    *partition_name = site.spec();
+    *in_memory = true;
+  } else {
+    // Default to the browser-wide storage partition and override based on |site|
+    // below.
+    partition_domain->clear();
+    partition_name->clear();
+    *in_memory = false;
+  }
 
 #if BUILDFLAG(ENABLE_EXTENSIONS)
   bool success = extensions::WebViewGuest::GetGuestPartitionConfigForSite(

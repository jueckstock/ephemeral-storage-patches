diff --git a/content/browser/frame_host/render_frame_host_manager.cc b/content/browser/frame_host/render_frame_host_manager.cc
index 4c370c23a221..dc09c4e45e90 100644
--- a/content/browser/frame_host/render_frame_host_manager.cc
+++ b/content/browser/frame_host/render_frame_host_manager.cc
@@ -783,6 +783,59 @@ void RenderFrameHostManager::DidCreateNavigationRequest(
   }
 }
 
+// ESP: core logic for selecting a site-isolation-url for a given navigation/request action
+base::Optional<GURL> RenderFrameHostManager::ComputeIsolationSiteURL(
+    BrowserContext* browser_context,
+    const GURL& main_url, 
+    const GURL& sub_url, 
+    const std::string& isolation_key
+) {
+  GURL root_site = SiteInstance::GetSiteForURL(browser_context, main_url);
+  GURL new_site = SiteInstance::GetSiteForURL(browser_context, sub_url);
+
+  /*auto tmp = root_site.spec();
+  auto* tmp2 = tmp.c_str();
+  auto tmp3 = new_site.spec();
+  auto* tmp4 = tmp3.c_str();
+  auto* tmp5 = isolation_key.c_str();
+  fprintf(stderr, "ESP-DEBUG: ComputeIsolationSiteURL('%s', '%s', '%s')\n", tmp2, tmp4, tmp5);*/
+
+
+  auto* policy = ChildProcessSecurityPolicyImpl::GetInstance();
+  bool is_isolated_origin = policy->IsIsolatedOrigin(IsolationContext(browser_context), url::Origin::Create(sub_url));
+
+  // push the frame's content into ephemeral/partitioned storage IFF
+  // (a) it's not already a specially-isolated origin [not a public thing, but supported in Chrome and in its unit tests]
+  // (b) its site URL differs from the root frame's last committed site URL
+  // (c) its site URL has an HTTP[S] scheme (i.e., a real remote HTTP resource/document)
+  // (d) its host is not a raw IP address [because our decoration scheme is broken by IP address origins :-( ]
+  if (!is_isolated_origin 
+      && (new_site != root_site) 
+      && new_site.SchemeIsHTTPOrHTTPS() 
+      && !new_site.HostIsIPAddress()) 
+  {
+    GURL::Replacements reps;
+    std::string alt_site_buffer{"esp---"};
+    alt_site_buffer += isolation_key;
+    alt_site_buffer += "---";
+    alt_site_buffer += new_site.host();
+    reps.SetHostStr(alt_site_buffer);
+    return base::make_optional(new_site.ReplaceComponents(reps));
+  }
+  return base::nullopt;
+  /*
+  // policy: isolation keyed to hex-MD5-digest-of-root-site-URL
+  {
+    GURL::Replacements reps;
+    std::string alt_site_buffer{"esp---"};
+    alt_site_buffer += base::MD5String(root_site.spec());
+    alt_site_buffer += "---";
+    alt_site_buffer += new_site.host();
+    reps.SetHostStr(alt_site_buffer);
+    alt_site = new_site.ReplaceComponents(reps);
+  } // */
+}
+
 RenderFrameHostImpl* RenderFrameHostManager::GetFrameHostForNavigation(
     NavigationRequest* request) {
   DCHECK(!request->common_params().url.SchemeIs(url::kJavaScriptScheme))
@@ -808,8 +861,33 @@ RenderFrameHostImpl* RenderFrameHostManager::GetFrameHostForNavigation(
   // First compute the SiteInstance to use for the navigation.
   SiteInstance* current_site_instance = render_frame_host_->GetSiteInstance();
   BrowserContext* browser_context = current_site_instance->GetBrowserContext();
+  
+  // ESP: if we have committed navigation for the main frame in a tree,
+  // update that root frame's navigation token to uniquely identify root-document lifetime
+  if (frame_tree_node_->IsMainFrame() && request->state() == 5 /* todo enum name */) {
+    frame_tree_node_->SetNavigationToken(request->devtools_navigation_token());
+  }
+
+  // ESP: detect if this is a 3rd-party-site subframe being navigated; if so,
+  // shunt it into an isolated SiteInstance using the root-document's navigation token
+  // as the isolation key
+  base::Optional<GURL> alt_site;
+  if (base::CommandLine::ForCurrentProcess()->HasSwitch("ephemeral-frame-storage")) {
+    auto* tree = frame_tree_node_->frame_tree();
+    auto* root = tree->root();
+    DCHECK(root->IsMainFrame());
+    if (root != frame_tree_node_) {
+      auto* root_rfh = root->current_frame_host();
+      alt_site = ComputeIsolationSiteURL(
+          browser_context,
+          root_rfh ? root_rfh->GetLastCommittedURL() : GURL{},
+          request->GetURL(),
+          root->GetNavigationToken()->ToString());
+    }
+  }
+
   scoped_refptr<SiteInstance> dest_site_instance =
-      GetSiteInstanceForNavigationRequest(request);
+      GetSiteInstanceForNavigationRequest(request, alt_site);
 
   // The SiteInstance determines whether to switch RenderFrameHost or not.
   bool use_current_rfh = current_site_instance == dest_site_instance;
@@ -2390,7 +2468,8 @@ bool RenderFrameHostManager::InitRenderView(
 
 scoped_refptr<SiteInstance>
 RenderFrameHostManager::GetSiteInstanceForNavigationRequest(
-    NavigationRequest* request) {
+    NavigationRequest* request,
+    const base::Optional<GURL>& alt_site) {
   SiteInstance* current_site_instance = render_frame_host_->GetSiteInstance();
 
   // All children of MHTML documents must be MHTML documents. They all live in
@@ -2439,8 +2518,9 @@ RenderFrameHostManager::GetSiteInstanceForNavigationRequest(
   if (cross_origin_policy_swap)
     request->set_require_coop_browsing_instance_swap();
 
+  const GURL& url_to_use = alt_site ? *alt_site : request->common_params().url;
   scoped_refptr<SiteInstance> dest_site_instance = GetSiteInstanceForNavigation(
-      request->common_params().url, request->GetSourceSiteInstance(),
+      url_to_use, request->GetSourceSiteInstance(),
       request->dest_site_instance(), candidate_site_instance,
       request->common_params().transition,
       request->state() >= NavigationRequest::CANCELING, is_reload,

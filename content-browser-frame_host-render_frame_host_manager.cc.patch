diff --git a/content/browser/frame_host/render_frame_host_manager.cc b/content/browser/frame_host/render_frame_host_manager.cc
index 73050ff98a79..a6e1cf3d0bc0 100644
--- a/content/browser/frame_host/render_frame_host_manager.cc
+++ b/content/browser/frame_host/render_frame_host_manager.cc
@@ -812,8 +812,69 @@ RenderFrameHostImpl* RenderFrameHostManager::GetFrameHostForNavigation(
   // First compute the SiteInstance to use for the navigation.
   SiteInstance* current_site_instance = render_frame_host_->GetSiteInstance();
   BrowserContext* browser_context = current_site_instance->GetBrowserContext();
+  
+  // ESP: if we have committed navigation for the main frame in a tree,
+  // update that root frame's navigation token to uniquely identify root-document lifetime
+  if (frame_tree_node_->IsMainFrame() && request->state() == 5 /* todo enum name */) {
+    frame_tree_node_->SetNavigationToken(request->devtools_navigation_token());
+  }
+
+  // ESP: detect if this is a 3rd-party-site subframe being navigated; if so,
+  // shunt it into an isolated SiteInstance using the root-document's navigation token
+  // as the isolation key
+  auto* tree = frame_tree_node_->frame_tree();
+  auto* root = tree->root();
+  GURL alt_site;
+  DCHECK(root->IsMainFrame());
+  if (root != frame_tree_node_) {
+    auto* root_rfh = root->current_frame_host();
+    GURL root_site;
+    if (root_rfh) {
+      root_site = SiteInstance::GetSiteForURL(browser_context, root_rfh->GetLastCommittedURL());
+    }
+    GURL new_site = SiteInstance::GetSiteForURL(browser_context, request->GetURL());
+    if (new_site != root_site) {
+      // /*
+      // policy: isolation keyed to lifetime-of-root-document-instance
+      auto nav_token = root->GetNavigationToken();
+      if (nav_token.has_value()) {
+        GURL::Replacements reps;
+        std::string alt_site_buffer{"esp---"};
+        alt_site_buffer += nav_token.value().ToString();
+        alt_site_buffer += "---";
+        alt_site_buffer += new_site.host();
+        reps.SetHostStr(alt_site_buffer);
+        alt_site = new_site.ReplaceComponents(reps);
+      } // */
+
+      /*
+      // policy: isolation keyed to hex-MD5-digest-of-root-site-URL
+      {
+        GURL::Replacements reps;
+        std::string alt_site_buffer{"esp---"};
+        alt_site_buffer += base::MD5String(root_site.spec());
+        alt_site_buffer += "---";
+        alt_site_buffer += new_site.host();
+        reps.SetHostStr(alt_site_buffer);
+        alt_site = new_site.ReplaceComponents(reps);
+      } // */
+
+
+      auto token = root->devtools_frame_token().ToString();
+      auto* tmp1 = token.c_str();
+      auto my_token = frame_tree_node_->devtools_frame_token().ToString();
+      auto* tmp3 = my_token.c_str();
+      auto url = request->GetURL().spec();
+      auto* tmp2 = url.c_str();
+      auto alt_site_str = alt_site.spec();
+      auto* tmp4 = alt_site_str.c_str();
+
+      fprintf(stderr, "ESP: RenderFrameHostManager::GetFrameHostForNavigation(...); mainFrame=%s, myFrame=%s, navUrl='%s', state=%d, alt-site='%s'\n", tmp1, tmp3, tmp2, (int)request->state(), tmp4);
+    }
+  }
+
   scoped_refptr<SiteInstance> dest_site_instance =
-      GetSiteInstanceForNavigationRequest(request);
+      GetSiteInstanceForNavigationRequest(request, alt_site.is_empty() ? nullptr : &alt_site);
 
   // The SiteInstance determines whether to switch RenderFrameHost or not.
   bool use_current_rfh = current_site_instance == dest_site_instance;
@@ -2401,7 +2462,8 @@ bool RenderFrameHostManager::InitRenderView(
 
 scoped_refptr<SiteInstance>
 RenderFrameHostManager::GetSiteInstanceForNavigationRequest(
-    NavigationRequest* request) {
+    NavigationRequest* request,
+    const GURL* alt_site) {
   SiteInstance* current_site_instance = render_frame_host_->GetSiteInstance();
 
   // All children of MHTML documents must be MHTML documents. They all live in
@@ -2472,8 +2534,9 @@ RenderFrameHostManager::GetSiteInstanceForNavigationRequest(
   if (cross_origin_policy_swap)
     request->set_require_coop_browsing_instance_swap();
 
+  const GURL& url_to_use = alt_site ? *alt_site : request->common_params().url;
   scoped_refptr<SiteInstance> dest_site_instance = GetSiteInstanceForNavigation(
-      request->common_params().url, request->GetSourceSiteInstance(),
+      url_to_use, request->GetSourceSiteInstance(),
       request->dest_site_instance(), candidate_site_instance,
       request->common_params().transition,
       request->state() >= NavigationRequest::CANCELING, is_reload,
